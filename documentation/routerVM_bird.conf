# Yes, even shell-like comments work...

# Configure logging
#log syslog { debug, trace, info, remote, warning, error, auth, fatal, bug };
#log stderr all;
#log "tmp" all;

# Override router ID
router id 1.1.1.1;

# You can define your own symbols...
#define xyzzy = (120+10);
#define '1a-a1' = (30+40);

# Define a route filter...
#filter test_filter {
#	if net ~ 10.0.0.0/16 then accept;
#	else reject;
#}

#filter sink { reject; }
#filter okay { accept; }

#include "filters.conf";

# Define another routing table
#table testable;

# Turn on global debugging of all protocols
#debug protocols all;



protocol kernel {
#	learn;			# Learn all alien routes from the kernel
#	persist;		# Don't remove routes on bird shutdown
	scan time 15;		# Scan kernel routing table every 20 seconds
	import all;		# Default is import all
	export all;		# Default is export none
#	kernel table 5;		# Kernel table to synchronize with (default: main)
}

# This pseudo-protocol watches all interface up/down events.
protocol device {
	scan time 10;		# Scan interfaces every 10 seconds
}

# The direct protocol automatically generates device routes to
# all network interfaces. Can exist in as many instances as you wish
# if you want to populate multiple routing tables with device routes.
protocol direct {
        interface "-arc*", "*";         # Exclude the ARCnets
}


# Static routes (again, there can be multiple instances, so that you
# can disable/enable various groups of static routes on the fly).
protocol static {
	route  30.0.0.0/16 via 30.1.0.2;
}


#filter test_filter {
#	if net ~ 30.2.0.0/252 then accept;
#	else reject;
#}

protocol bgp Peer_UPSTREAM {
	hold time 7200;
	keepalive time 5;
	description "Peer_UPSTREAM";
	import all;
	local as 65001; 
	neighbor 30.2.0.2 as 65002;
	export where proto = "export_to_upstream";
}

protocol bgp reflect_to_router_vm {
	hold time 60;
	igp table master;
	local as 65001;
	rr client;
	neighbor 192.168.122.1 port 1179 as 65001;
	import none;
	export all;
}
